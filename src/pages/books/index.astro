---
import { Image } from "astro:assets";
import Layout from "@/layouts/Layout.astro";

type Status = 'reading' | 'stopped' | 'standby' | 'done';

type Book = {
  title: string;
  src: string;
  description: string;
  pages: number;
  currentPage: number;
  status: Status;
  link?: string;
};

const books: Book[] = [
  {
    title: 'Clean Code',
    src: '/books/clean_code.jpg',
    description: 'A handbook of agile software craftsmanship, exploring how to write code that is clean, maintainable, and efficient.',
    pages: 462,
    currentPage: 0,
    status: 'standby',
    link: "https://drive.google.com/file/d/1LborZn0ygzsemoyjiAYpUawJTCsHRbvC/view?usp=drive_link",
  },
  {
    title: 'Clean Architecture',
    src: '/books/clean_architecture.jpg',
    description: 'Clean Architecture is essential reading for every current or aspiring software architect, systems analyst, system designer, and software manager-and for every programmer who must execute someone else\'s designs.',
    pages: 444,
    currentPage: 0,
    status: 'standby',
    link: "https://drive.google.com/file/d/1sfHOCa8wUg7dIaYdifkcSbjWPDpQDG8_/view?usp=drive_link",
  },
  {
    title: 'Domain Driven Design (DDD)',
    src: '/books/ddd.jpg',
    description: 'A foundational book that explains the principles of designing software systems deeply rooted in business domains.',
    pages: 619,
    currentPage: 0,
    status: 'standby',
    link: "https://drive.google.com/file/d/1fJfJJvqmbESXFxyKXzDNUUSxv8biPwRR/view?usp=drive_link",
  },
  {
    title: 'System Design Interview',
    src: '/books/system_design_interview.jpg',
    description: 'A guide for preparing and acing system design interviews, with real-world examples and scalable architecture techniques.',
    pages: 269,
    currentPage: 151,
    status: 'reading',
    link: "https://drive.google.com/file/d/1p8XmZN1ivNnQVtvGhtFTjBsvN8keeYSd/view?usp=drive_link"
  },
  {
    title: 'Thinking in Systems',
    src: '/books/thinking_in_systems.jpg',
    description: 'A primer on systems thinking, teaching readers how to understand, analyze, and solve complex system-based problems.',
    pages: 255,
    currentPage: 0,
    status: 'standby',
    link: "https://drive.google.com/file/d/1ApPShdY-Ka_h4JrxGH_bP8z7Xu95tR_V/view?usp=drive_link",
  },
];

const statusColor: Record<Status, string> = {
  done: 'bg-green-500',
  stopped: 'bg-yellow-500',
  reading: 'bg-primary',
  standby: 'bg-gray-500',
};

---

<Layout title="Books">
  <div class="mx-4 md:mx-40 mt-10">
    <div class="flex justify-center items-center gap-8 flex-col">
      {books.sort((a, b) => {
        if(a.status === 'reading' || b.status === 'reading') return -1;
        return 1;
      }).map((book) => (
        <div class="flex items-center bg-offset rounded-2xl w-full md:max-w-2xl shadow-lg">
          <Image
            src={book.src}
            alt={book.title}
            width={200}
            height={200}
            class="hidden md:block object-cover bg-no-repeat rounded-2xl"
          />
          <div class="mx-4 my-2 w-full px-4 py-4">
            <h3 class="text-2xl mb-4 font-bold">{book.title}</h3>
            <div class="w-full h-5 bg-border rounded-full">
              <div
                class="rounded-full bg-primary h-5"
                style={{ width: `${Math.floor(book.currentPage/book.pages * 100)}%` }}
              />
            </div>
            <div class="text-end mt-2">{`${Math.floor(book.currentPage/book.pages * 100)}% (${book.currentPage}/${book.pages})`}</div>
            <p class="mt-4">{book.description}</p>
            <div class="flex justify-between mt-8">
              {book.link && <a target="_blank" href={book.link} class="bg-primary px-2 rounded-full hover:bg-secondary">Link</a>}
              <div class={`${statusColor[book.status]} rounded-full text-center px-2 text-white`}>
                {book.status}
              </div>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</Layout>